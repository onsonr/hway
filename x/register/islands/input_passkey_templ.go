// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package islands

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func InputPasskey(addr string, userHandle string, challenge string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, navigatorCredentialsCreate(addr, userHandle, challenge))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<sl-button style=\"width: 100%;\" onclick=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 templ.ComponentScript = navigatorCredentialsCreate(addr, userHandle, challenge)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"><sl-icon slot=\"prefix\" name=\"passkey\" library=\"sonr\" style=\"font-size: 24px;\" class=\"text-neutral-500\"></sl-icon> Register Passkey</sl-button>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func navigatorCredentialsCreate(userId string, userHandle string, challenge string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_navigatorCredentialsCreate_5c0f`,
		Function: `function __templ_navigatorCredentialsCreate_5c0f(userId, userHandle, challenge){const publicKey = {
    challenge: Uint8Array.from(challenge, (c) => c.charCodeAt(0)),
    rp: {
      name: "Sonr.ID",
    },
    user: {
      // Assuming that userId is ASCII-only
      id: Uint8Array.from(userId, (c) => c.charCodeAt(0)),
      name: userId,
      displayName: userHandle,
    },
    pubKeyCredParams: [
      {
        type: "public-key",
        alg: -7, // "ES256"
      },
      {
        type: "public-key",
        alg: -257, // "RS256"
      },
    ],
    authenticatorSelection: {
      userVerification: "required",
      residentKey: "required",
      authenticatorAttachment: "platform",
    },
    timeout: 60000, // 1 minute
    extensions: {
      payment: {
        isPayment: true,
      },
      largeBlob: {
        supported: "preferred",
      },
    },
  };

  // Helper function to convert ArrayBuffer to Base64URL string
  function arrayBufferToBase64URL(buffer) {
    const bytes = new Uint8Array(buffer);
    let str = '';
    bytes.forEach(byte => { str += String.fromCharCode(byte) });
    return btoa(str)
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
  }

navigator.credentials
  .create({ publicKey })
  .then((newCredentialInfo) => {
    if (!(newCredentialInfo instanceof PublicKeyCredential)) {
      throw new Error('Received credential is not a PublicKeyCredential');
    }

    const response = newCredentialInfo.response;
    if (!(response instanceof AuthenticatorAttestationResponse)) {
      throw new Error('Response is not an AuthenticatorAttestationResponse');
    }

    // Convert the credential data to a cross-platform compatible format
    const credentialJSON = {
      id: newCredentialInfo.id,
      rawId: arrayBufferToBase64URL(newCredentialInfo.rawId),
      type: newCredentialInfo.type,
      authenticatorAttachment: newCredentialInfo.authenticatorAttachment || null,
      transports: Array.isArray(response.getTransports) ? response.getTransports() : [],
      clientExtensionResults: newCredentialInfo.getClientExtensionResults(),
      response: {
        attestationObject: arrayBufferToBase64URL(response.attestationObject),
        clientDataJSON: arrayBufferToBase64URL(response.clientDataJSON)
      }
    };

    // Set the form value with the stringified credential data
    const credential = document.getElementById('credential-data');
    credential.value = JSON.stringify(credentialJSON);
    
    // Submit the form
    const form = document.getElementById('passkey-form');
    form.submit();
  })
  .catch((err) => {
    console.error('Passkey creation failed:', err);
    alert(` + "`" + `Failed to create passkey: ${err.message || 'Unknown error'}` + "`" + `);
  });
{
  "scopes": [
    "core-chain",
    "core-ibc",
    "sonr-hway",
    "sonr-matrix",
    "sonr-motr",
    "x-did",
    "x-dwn",
    "x-svc",
    "security-mpc",
    "security-ucan",
    "security-zkp",
    "ci-cd",
    "dev-ops"
  ],
  "docs": [
    {
      "keywords": [
        "github",
        "actions",
        "workflows",
        "syntax"
      ],
      "url": "https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions"
    },
    {
      "keywords": [
        "cosmos",
        "tooling",
        "cosmovisor"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/tooling/cosmovisor"
    },
    {
      "keywords": [
        "process-compose",
        "configuration"
      ],
      "url": "https://f1bonacc1.github.io/process-compose/configuration/"
    },
    {
      "keywords": [
        "taskfile",
        "cli",
        "reference"
      ],
      "url": "https://taskfile.dev/reference/cli"
    },
    {
      "keywords": [],
      "url": "https://taskfile.dev/reference/schema"
    },
    {
      "keywords": [
        "taskfile",
        "templating",
        "reference"
      ],
      "url": "https://taskfile.dev/reference/templating/"
    },
    {
      "keywords": [
        "mkdocs",
        "material",
        "reference"
      ],
      "url": "https://squidfunk.github.io/mkdocs-material/reference/"
    },
    {
      "keywords": [
        "pkl",
        "language",
        "reference"
      ],
      "url": "https://pkl-lang.org/main/current/language-reference/index.html"
    },
    {
      "keywords": [
        "pwa",
        "service-workers",
        "web"
      ],
      "url": "https://web.dev/learn/pwa/service-workers/"
    },
    {
      "keywords": [
        "service-workers",
        "web",
        "api"
      ],
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"
    },
    {
      "keywords": [
        "web-authentication",
        "web",
        "api"
      ],
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API"
    },
    {
      "keywords": [
        "sdk",
        "modules",
        "cosmos",
        "manager"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/building-modules/module-manager"
    },
    {
      "keywords": [
        "sdk",
        "modules",
        "cosmos",
        "messages",
        "queries"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/building-modules/messages-and-queries"
    },
    {
      "keywords": [
        "sdk",
        "modules",
        "messages",
        "service",
        "cosmos"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/building-modules/msg-services"
    },
    {
      "keywords": [
        "sdk",
        "modules",
        "services",
        "cosmos",
        "query"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/building-modules/query-services"
    },
    {
      "keywords": [
        "cosmos",
        "depinject",
        "modules",
        "sdk"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/building-modules/depinject"
    },
    {
      "keywords": [
        "ibc",
        "apps",
        "sdk",
        "interchain-accounts"
      ],
      "url": "https://ibc.cosmos.network/v8/apps/interchain-accounts/overview/"
    },
    {
      "keywords": [
        "ibc",
        "apps",
        "sdk",
        "transfer"
      ],
      "url": "https://ibc.cosmos.network/v8/apps/transfer/overview/"
    },
    {
      "keywords": [
        "osmosis",
        "modules",
        "ibc",
        "assets"
      ],
      "url": "https://docs.osmosis.zone/osmosis-core/asset-info/"
    },
    {
      "keywords": [
        "ibc",
        "osmosis",
        "tokenfactory",
        "modules",
        "assets"
      ],
      "url": "https://docs.osmosis.zone/osmosis-core/modules/tokenfactory"
    },
    {
      "keywords": [
        "ibc",
        "mint",
        "cctp",
        "noble",
        "assets"
      ],
      "url": "https://docs.noble.xyz/cctp/mint"
    },
    {
      "keywords": [
        "ibc",
        "relayer",
        "nomic",
        "assets"
      ],
      "url": "https://docs.nomic.io/network/ibc-relayer"
    },
    {
      "keywords": [
        "ibc",
        "cctp",
        "noble",
        "mint_forward",
        "assets"
      ],
      "url": "https://docs.noble.xyz/cctp/mint_forward"
    },
    {
      "keywords": [
        "evmos",
        "erc20",
        "assets"
      ],
      "url": "https://docs.evmos.org/protocol/modules/erc20"
    },
    {
      "keywords": [
        "nomic",
        "nbtc",
        "assets"
      ],
      "url": "https://docs.nomic.io/nbtc"
    },
    {
      "keywords": [
        "mpc",
        "wallet",
        "cryptography",
        "capability",
        "invokation"
      ],
      "url": "https://csrc.nist.gov/CSRC/media/Events/NTCW19/papers/paper-DKLS.pdf"
    },
    {
      "keywords": [
        "ucan",
        "spec",
        "cryptography",
        "authorization"
      ],
      "url": "https://raw.githubusercontent.com/ucan-wg/spec/refs/heads/main/README.md"
    },
    {
      "keywords": [
        "zero-knowledge",
        "proofs",
        "cryptography",
        "privacy"
      ],
      "url": "https://eprint.iacr.org/2021/1672.pdf"
    },
    {
      "keywords": [
        "gateway",
        "http",
        "sse"
      ],
      "url": "https://echo.labstack.com/docs/cookbook/sse"
    },
    {
      "keywords": [
        "gateway",
        "http",
        "websocket"
      ],
      "url": "https://echo.labstack.com/docs/cookbook/websocket"
    },
    {
      "keywords": [
        "gateway",
        "http",
        "subdomain"
      ],
      "url": "https://echo.labstack.com/docs/cookbook/subdomain"
    },
    {
      "keywords": [
        "tigerbeetle",
        "models",
        "oracle"
      ],
      "url": "https://docs.tigerbeetle.com/coding/data-modeling"
    },
    {
      "keywords": [
        "tigerbeetle",
        "two=phase",
        "transfers",
        "oracle"
      ],
      "url": "https://docs.tigerbeetle.com/coding/two-phase-transfers"
    },
    {
      "keywords": [
        "tigerbeetle",
        "oracle",
        "reliable",
        "transaction",
        "submission"
      ],
      "url": "https://docs.tigerbeetle.com/coding/reliable-transaction-submission"
    },
    {
      "keywords": [
        "currency",
        "exchange",
        "tigerbeetle",
        "oracle"
      ],
      "url": "https://docs.tigerbeetle.com/coding/recipes/currency-exchange"
    },
    {
      "keywords": [
        "balance",
        "tigerbeetle",
        "oracle",
        "conditional",
        "transfers"
      ],
      "url": "https://docs.tigerbeetle.com/coding/recipes/balance-conditional-transfers"
    },
    {
      "keywords": [
        "tigerbeetle",
        "account",
        "oracle"
      ],
      "url": "https://docs.tigerbeetle.com/reference/account"
    },
    {
      "keywords": [
        "tigerbeetle",
        "transfer",
        "oracle"
      ],
      "url": "https://docs.tigerbeetle.com/reference/transfer"
    },
    {
      "keywords": [
        "substreams",
        "packages",
        "consumer",
        "oracle"
      ],
      "url": "https://docs.substreams.dev/documentation/consume/packages"
    },
    {
      "keywords": [
        "substreams",
        "deploy",
        "service",
        "oracle"
      ],
      "url": "https://docs.substreams.dev/documentation/consume/sql/deployable-services/local-service"
    },
    {
      "keywords": [
        "substreams",
        "tutorial",
        "cosmos",
        "injective"
      ],
      "url": "https://docs.substreams.dev/tutorials/cosmos/injective/foundational"
    },
    {
      "keywords": [
        "worker",
        "http",
        "jwt"
      ],
      "url": "https://echo.labstack.com/docs/cookbook/jwt"
    },
    {
      "keywords": [
        "worker",
        "http",
        "secure"
      ],
      "url": "https://echo.labstack.com/docs/middleware/secure"
    },
    {
      "keywords": [
        "worker",
        "http",
        "service-workers",
        "web",
        "api"
      ],
      "url": "https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"
    },
    {
      "keywords": [
        "synapse",
        "matrix",
        "configuration",
        "usage"
      ],
      "url": "https://element-hq.github.io/synapse/latest/usage/configuration/config_documentation.html"
    },
    {
      "keywords": [
        "cosmos",
        "protobuf",
        "orm",
        "sdk"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/packages/orm"
    },
    {
      "keywords": [
        "cosmos",
        "sdk",
        "modules",
        "auth"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/modules/auth"
    },
    {
      "keywords": [
        "cosmos",
        "sdk",
        "modules",
        "bank"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/modules/bank"
    },
    {
      "keywords": [
        "cosmos",
        "modules",
        "authz",
        "sdk"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/modules/authz"
    },
    {
      "keywords": [
        "cosmos",
        "protobuf",
        "collections",
        "sdk"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/packages/collections"
    },
    {
      "keywords": [
        "cosmos",
        "modules",
        "gov",
        "sdk"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/modules/gov"
    },
    {
      "keywords": [
        "cosmos",
        "modules",
        "staking",
        "sdk"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/modules/staking"
    },
    {
      "keywords": [
        "cosmos",
        "protobuf",
        "annotations",
        "sdk"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations"
    },
    {
      "keywords": [
        "cosmos",
        "sdk",
        "modules",
        "group"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/modules/group"
    },
    {
      "keywords": [
        "cosmos",
        "sdk",
        "modules",
        "nft"
      ],
      "url": "https://docs.cosmos.network/v0.50/build/modules/nft"
    }
  ],
  "next-milestone": "34"
}
}`,
		Call:       templ.SafeScript(`__templ_navigatorCredentialsCreate_5c0f`, userId, userHandle, challenge),
		CallInline: templ.SafeScriptInline(`__templ_navigatorCredentialsCreate_5c0f`, userId, userHandle, challenge),
	}
}

var _ = templruntime.GeneratedTemplate
